name: deposists-build-deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "environment"
        required: true
        type: choice
        options:
          - dev
          - uat
          - prod

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write # Needed for OIDC auth

    steps:
      - name: Set environment-specific variables
        run: |
          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            echo "ECS_CLUSTER=deposists-cluster" >> $GITHUB_ENV
            echo "ECS_SERVICE=deposists-dev-service" >> $GITHUB_ENV
            echo "CONTAINER_NAME=deposists-dev-container" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=deposists-dev-ecr" >> $GITHUB_ENV
            echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "uat" ]; then
            echo "ECS_CLUSTER=deposists-cluster" >> $GITHUB_ENV
            echo "ECS_SERVICE=deposists-uat-service" >> $GITHUB_ENV
            echo "CONTAINER_NAME=deposists-uat-container" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=deposists-uat-ecr" >> $GITHUB_ENV
            echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "ECS_CLUSTER=deposists-cluster" >> $GITHUB_ENV
            echo "ECS_SERVICE=deposists-prod-service" >> $GITHUB_ENV
            echo "CONTAINER_NAME=deposists-prod-container" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=deposists-prod-ecr" >> $GITHUB_ENV
            echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Tag Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker build -t $IMAGE_URI -f Dockerfile .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image
        run: docker push $IMAGE_URI

      - name: Deploy to Amazon ECS
        run: |
          echo "Updating ECS service in ${{ github.event.inputs.environment }}..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
